// Mocks generated by Mockito 5.1.0 from annotations
// in nurbanhoney_flutter/test/features/nurban_honey/domain/usecases/profile_repository/get_profile_comments_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:nurbanhoney_flutter/core/error/failures.dart' as _i5;
import 'package:nurbanhoney_flutter/features/nurban_honey/domain/entities/empty_response/empty_response.dart'
    as _i9;
import 'package:nurbanhoney_flutter/features/nurban_honey/domain/entities/profile/profile/profile.dart'
    as _i6;
import 'package:nurbanhoney_flutter/features/nurban_honey/domain/entities/profile/profile_article/profile_article.dart'
    as _i7;
import 'package:nurbanhoney_flutter/features/nurban_honey/domain/entities/profile/profile_comment/profile_comment.dart'
    as _i8;
import 'package:nurbanhoney_flutter/features/nurban_honey/domain/repositories/profile_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [ProfileRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockProfileRepository extends _i1.Mock implements _i3.ProfileRepository {
  MockProfileRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Profile>> getProfile(
          {String? token}) =>
      (super.noSuchMethod(Invocation.method(#getProfile, [], {#token: token}),
              returnValue: Future<_i2.Either<_i5.Failure, _i6.Profile>>.value(
                  _FakeEither_0<_i5.Failure, _i6.Profile>()))
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Profile>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i7.ProfileArticle>>> getProfileArticles(
          {String? token, int? offset, int? limit}) =>
      (super.noSuchMethod(
          Invocation.method(#getProfileArticles, [],
              {#token: token, #offset: offset, #limit: limit}),
          returnValue:
              Future<_i2.Either<_i5.Failure, List<_i7.ProfileArticle>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i7.ProfileArticle>>())) as _i4
          .Future<_i2.Either<_i5.Failure, List<_i7.ProfileArticle>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i8.ProfileComment>>> getProfileComments(
          {String? token, int? offset, int? limit}) =>
      (super.noSuchMethod(
          Invocation.method(#getProfileComments, [],
              {#token: token, #offset: offset, #limit: limit}),
          returnValue:
              Future<_i2.Either<_i5.Failure, List<_i8.ProfileComment>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i8.ProfileComment>>())) as _i4
          .Future<_i2.Either<_i5.Failure, List<_i8.ProfileComment>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i9.EmptyResponse>> requestSignOut(
          {String? token, int? userId}) =>
      (super.noSuchMethod(
          Invocation.method(
              #requestSignOut, [], {#token: token, #userId: userId}),
          returnValue: Future<_i2.Either<_i5.Failure, _i9.EmptyResponse>>.value(
              _FakeEither_0<_i5.Failure, _i9.EmptyResponse>())) as _i4
          .Future<_i2.Either<_i5.Failure, _i9.EmptyResponse>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i9.EmptyResponse>> editProfile(
          {String? token,
          String? nickname,
          String? description,
          List<String>? insignias}) =>
      (super.noSuchMethod(
          Invocation.method(#editProfile, [], {
            #token: token,
            #nickname: nickname,
            #description: description,
            #insignias: insignias
          }),
          returnValue: Future<_i2.Either<_i5.Failure, _i9.EmptyResponse>>.value(
              _FakeEither_0<_i5.Failure, _i9.EmptyResponse>())) as _i4
          .Future<_i2.Either<_i5.Failure, _i9.EmptyResponse>>);
}
