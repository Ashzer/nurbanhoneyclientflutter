// Mocks generated by Mockito 5.1.0 from annotations
// in nurbanhoney_flutter/test/features/nurban_honey/domain/usecases/rank_repository/get_simple_ranks_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:nurbanhoney_flutter/core/error/failures.dart' as _i5;
import 'package:nurbanhoney_flutter/features/nurban_honey/domain/entities/rank/rank.dart'
    as _i6;
import 'package:nurbanhoney_flutter/features/nurban_honey/domain/entities/rank_simple/rank_simple.dart'
    as _i7;
import 'package:nurbanhoney_flutter/features/nurban_honey/domain/repositories/rank_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [RankRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRankRepository extends _i1.Mock implements _i3.RankRepository {
  MockRankRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Rank>>> getRanks() =>
      (super.noSuchMethod(Invocation.method(#getRanks, []),
          returnValue: Future<_i2.Either<_i5.Failure, List<_i6.Rank>>>.value(
              _FakeEither_0<_i5.Failure, List<_i6.Rank>>())) as _i4
          .Future<_i2.Either<_i5.Failure, List<_i6.Rank>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i7.RankSimple>>> getSimpleRanks(
          {int? offset, int? limit}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getSimpleRanks, [], {#offset: offset, #limit: limit}),
              returnValue:
                  Future<_i2.Either<_i5.Failure, List<_i7.RankSimple>>>.value(
                      _FakeEither_0<_i5.Failure, List<_i7.RankSimple>>()))
          as _i4.Future<_i2.Either<_i5.Failure, List<_i7.RankSimple>>>);
}
